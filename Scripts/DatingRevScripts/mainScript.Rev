# print errors for undefined variables
if (!exists("tree_file"))    "ERROR: `tree_file` undefined"  # Starting tree
if (!exists("clade_file"))    "ERROR: `clade_file` undefined"
if (!exists("calibration_file"))    "ERROR: `calibration_file` undefined"
if (!exists("constraint_file"))    "ERROR: `constraint_file` undefined"
if (!exists("mean_tree_file"))    "ERROR: `mean_tree_file` undefined"
if (!exists("var_tree_file"))    "ERROR: `var_tree_file` undefined"
if (!exists("handle"))    "ERROR: `handle` undefined"
if (!exists("rate_model"))    "ERROR: `rate_model` undefined"
if (!exists("mc3"))    "ERROR: `mc3` undefined"

###########
# Options #
###########
# handle="test"
#rate_model="WNr_FixedMeanAndVar" #"WNr"     #"strictr"   #"LNr"    #"WNr"
ctmc="BL"
tree_model="BD"
constrain=true

extension = ""

mcmc_length = 100000   #300000/6.
mcmc_burnin = 10000*1
mcmc_nchains = 1
mcmc_printgen = 100

time_moves=true
add_moves=true
hyper_weigth=3.0

#set initial rates according to initial tree
initialize_rates=false #true

#reading bug fix
var_scaling<-1

#calibrations
calib_file=calibration_file

#constraints
cons_file=constraint_file


tree <- readTrees(tree_file)[1]

print ("\t\tRoot age : " + tree.rootAge())

if (ctmc!="BL")
{
  print("ERROR: this script has not been tested with the alignment.")
  exit(-1)
  alignment_file=handle+".fst"
  data <- readDiscreteCharacterData(alignment_file)
}

###########
# Options #
###########

# set my move index
mvi = 1
mni = 0

# Get some useful variables from the data. We need these later on.
n_species <- tree.ntips()
n_branches <- 2*n_species - 2
taxa <- tree.taxa()

##############
# Root Prior #
##############

age_fossil_root <- tree.rootAge() # constant node corresponding to the (true) age of the root
width_age_prior_root <- age_fossil_root / 5  # By default we decide that the width of the calibration interval is fossil_age/5

root_age_min <- age_fossil_root - width_age_prior_root
root_age_max <- age_fossil_root + width_age_prior_root

root_time_real ~ dnUniform(root_age_min, root_age_max)

root_time := abs( root_time_real )

root_time_real.setValue(tree.rootAge())

################
# Constraints  #
################
if (constrain) {
extension=extension+"_cons"
constraints <- readRelativeNodeAgeConstraints(file=cons_file);
}

##############
# Tree model #
##############
source("Scripts/DatingRevScripts/GergelyScripts/"+tree_model+".Rev")
print(psi)
### add some moves that change the ages of the nodes in the tree
if (time_moves)
{
        moves[mvi++] = mvScale(root_time_real, weight=1.0, lambda=0.1)
        moves[mvi++] = mvSubtreeScale(psi, weight=1.0*n_branches)
        moves[mvi++] = mvNodeTimeSlideUniform(psi, weight=1.0*n_branches)
        moves[mvi++] = mvLayeredScaleProposal(tree=psi, lambda=0.1, tune=true, weight=1.0*n_branches)
}

# WE DON'T DO THAT : We rescale the tree so that the root age is initial_root_height
# tree.rescale( initial_root_height / tree.rootAge() )

# We fix the tree
psi.setValue(tree)

print("Starting time tree:")
print(psi)

#read mean and var bls
if (ctmc=="BL" || initialize_rates) {
  mean_tree <- readBranchLengthTrees(mean_tree_file)[1]
  var_tree <- readBranchLengthTrees(var_tree_file)[1]
  print("Unrooted tree with Mean Branch Lengths:")
  print(mean_tree)

  rootId <- tree.getRootIndex()
  outgroup <- tree.getDescendantTaxa(rootId)

  ### REROOT AND MAKE BIFURCATING
  mean_tree.reRootAndMakeBifurcating(clade(outgroup))
  var_tree.reRootAndMakeBifurcating(clade(outgroup))

  ### RENUMBERING
  mean_tree.renumberNodes(tree)
  var_tree.renumberNodes(tree)

  print("Tree with Mean Branch Lengths:")
  print(mean_tree)
  source("Scripts/DatingRevScripts/readBLTrees.Rev");
}

##########
# Clades #
##########
source(clade_file)


################
# Calibrations #
################
source(calib_file)

################
# Rate Model   #
################
source("Scripts/DatingRevScripts/GergelyScripts/"+rate_model+".Rev")

################
# CTMC         #
################
source("Scripts/DatingRevScripts/GergelyScripts/"+ctmc+".Rev")

#some things we would like to see in the .log
for(i in 1:n_branches)
{
  ages[i] := psi.nodeAge(i)
  ages2[i] := tree.nodeAge(i)
}
print(ages)
print(ages2)

#############
# THE Model #
#############
mymodel = model(branch_rates)

if (mc3=="true") {
  extension=extension+"_MC3"
}
fname_stem=handle+extension
monitors[++mni] = mnModel(filename=fname_stem+".log",printgen=10, separator = TAB)
monitors[++mni] = mnStochasticVariable(filename=fname_stem+"_Stoch.log",printgen=40)

monitors[++mni] = mnExtNewick(filename=fname_stem+".trees", isNodeParameter=FALSE, printgen=40, separator = TAB, tree=psi, branch_rates)
monitors[++mni] = mnScreen(printgen=mcmc_printgen, root_time)

if (mc3=="true") {
  mymcmc = mcmcmc(mymodel, monitors, moves, nruns=1, nchains=4, tuneHeat=TRUE)

} else {
  mymcmc = mcmc(mymodel, monitors, moves, nruns=1)
}

if (mcmc_burnin>0) mymcmc.burnin(generations=mcmc_burnin,tuningInterval=mcmc_burnin/10)
mymcmc.operatorSummary()

mymcmc.run(generations=mcmc_length)
mymcmc.operatorSummary()

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
#treetrace = readTreeTrace(fname_stem+".trees", treetype="clock", burnin=0.25)

#map_tree = mapTree(treetrace,fname_stem+".tree")

# you may want to quit RevBayes now
q()
