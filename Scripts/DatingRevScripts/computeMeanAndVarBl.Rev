trees = readBranchLengthTrees("example.treelist")
MAPtree = readBranchLengthTrees("example.treelist")[1]

num_branches = trees[1].nnodes()-1

bl_means <- rep(0.0,num_branches)
bl_squaredmeans <- rep(0.0,num_branches)

print("trees.size()")
print(trees.size())

print("trees[1].branchLength(1)")
print(trees[1].branchLength(1))

print("trees[1].branchLength(num_branches)")
print(trees[1].branchLength(num_branches))

print("For:")
for (j in 1:num_branches ) {
  print(trees[1].branchLength(j))
  }

for (i in 1:(trees.size())) {
  for (j in 1:num_branches ) {
    bl_means[j] <- bl_means[j] + trees[i].branchLength(j)
    bl_squaredmeans[j] <- bl_squaredmeans[j] + trees[i].branchLength(j)^2
    }
}

for (j in 1:num_branches ) {
  bl_means[j] <- bl_means[j] / (trees.size())
  bl_squaredmeans[j] <- bl_squaredmeans[j] / (trees.size())
}

print("\n\t\Ã¾BEFORE changing branch lengths")
print(MAPtree)

for (j in 1:num_branches ) {
  MAPtree.setBranchLength(j, bl_means[j])
}

print("\n\t\tAFTER changing branch lengths")
print(MAPtree)

writeNexus("meanBLTree.nex", MAPtree)
print("The tree with mean branch lengths has been saved.")


print ("Computing variance tree")
for (j in 1:num_branches ) {
  MAPtree.setBranchLength(j, abs ( bl_squaredmeans[j] - bl_means[j]^2) )
}

writeNexus("varBLTree.nex", MAPtree)
print("The tree with variance branch lengths has been saved.")

q()
